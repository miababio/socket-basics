                                    NOTES
                                    -----
                                    
Getting Started
    - Before, we used HTTP requests between the client and the server to manage and retrieve data (GET, POST, etc.)
    - With sockets, we can get the server to push live data to the client, without the client having to request anything
        - Can be useful for examples like messaging (chat app), or email
    - 2-way communication; Client can ask/receive info, and the server can do the same
    - Setting up for using sockets
        - Express -> version 4.13.3
        - server.js
            - Difference this time is that we are starting the server with built-in node modules, instead of using express
            - See Example 1
    - Quick Reminder for pushing code to heroku
        - First time around you have to do:
            - heroku create
            - git push heroku master (only need to specify master the first time)
        - After that, you can normally do "git push heroku"
    
Adding Socket.io To Your App
    - Install module Socket.io
        - Using version 1.3.7, latest version is 2.0.3
    - To start using it, we require it like so:
        - var io = require("socket.io")(http);
        - Remember how to use Express we used the 'app' variable, and did commands with it (app.use, app.get, etc.)? Think of using the 'io' variable to do the same thing, but with sockets
    - To see this in action, we need to do some code on the frontend as well
        - Adding jQuery (http://jquery.com/download/)
        - Add socket-io (https://cdn.socket.io/socket.io-1.3.7.js)
    - Connecting to our server
        - See Example 2
        
Exploring the Frontend
    - Moved script code into app.js
    - Improves code testing, maintenance of code by putting it in a separate file
    - On the server side, we used the on() function to let the server know when a client has connected to it; We can do something similar on the client side, to let the client know when the server is connected to the client
        - See Example 3
    - Problem: We can see our log from the server, but when it comes to seeing our messages on the front-end, we can't see it
    - Solution: Use Chrome Developer Tools
        - Let's you explore the frontend of your application    
        - To get there, click on the Overflow menu -> More Tools -> Developer Tools
            - Shortcut: Ctrl + Shift + I
        - The first thing you get navigated to is the Elements inspector
            - This tab let's you see all the HTML loaded in this project, including some extra things from chrome-extensions
        - We want the Console tab
            - Similar to command prompt
            - This is where we see our "Connected to socket.io server!" message   
            - Another cool thing with the console is that you can type in Javascript code straight up inside of it
                - You can create variables and display them by just typing the variable name
                    - Ex: > var name = "Michael";
                          > name // prints Michael
                - You can display complex objects/variable as well
                    - Very useful for debugging when something's going wrong

Sending Live Data Back & Forth
    - Ex: Chat app;
        - Basic idea is let's say it's between you and someone else. You send a message -> message goes to server -> server gets message and sends it to everybody's screen, including yours
    - server.js io.on actually has a "socket" parameter
        - io.on("connection", function(socket)
            - socket = 1 individual connection
            - inside of this fuction, you can have as many custom events as you want (message, photoResized, pizzeDelivered, etc.)
            - emit("<event_name>", <data_you_want_to_send>)
                - event_name -> a custom event name (Ex: "message")
                - <data_you_want_to_send> -> The data you want to send
                    - Note: This parameter only lets you have 1 thing to send, so if you want to send multiple things, a good idea is to use an object
                        - This let's you send all data at once, such as the text, a timestamp, etc.
    - Sending live data -> basic example
        - See Example 4
    - Two Browsers Communicating
        - See Example 5
            - NOTE: socket.broadcast.emit -> Sends to all browsers EXCEPT you
                    io.emit               -> Sends to all browsers INCLUDING you

Creating The Front-end UI
    - In index.html, we created the following
        - <form id="message-form">
            <input type="text" name="message"/>
            <input type="submit"/>
          </form>
          
    - This is the front-end we'll use to send messages
    - In app.js, we use Javascript to add functionality to the form
        - var $form = jQuery("#message-form");
            - In jQuery, you can pass a selector inside the parentheses, and jQuery will grab every type of attribute
                                        --------
                - You can also pass in ID's
                    - Ex: jQuery("input") // grabs all the input tags
            - The '$' in front of the 'form' variable means that the form variable is going to store a jQuery instance of an element
                - Meaning it can access methods of a jQuery element
        - See Example 6
        
Showing Messages In App
    - Right now, when a message is sent, you can only see it in the console
    - Let's change it so the messages show up live in our HTML
    - index.html -> Added <div> to insert messages there
    - Note: jQuery(".messages")
        - To target an ID, use the '#' sign                         ('#messages')
        - To target an element by a tag name, just use the tag name ('input[name=message]')
        - to target a class, use the '.' sign                       ('.message')
    - See Example 7
    - Problem: Right now when you send a message, you can't see it; You can only see it on the receiving side
        - Solution: In server.js, change socket.broadcast.emit(...) to io.emit(...)
            - Remember -> socket.broadcast.emit() Sends to all browsers EXCEPT you, while io.emit() sends to all browsers INCLUDING you

Working With Time
    - Using a library called Moment -> Will help us display time in a nice format
        - momentjs.com
        - Using version 2.10.6, latest is 2.18.1
    - Working with Moment
        - How to get the current time
        
            - var moment = require("moment");
              var now = moment(); 
              
              - Now, the "now" variable is a moment object, which now provides us with methods to manipulate and display the time.
            - Ex: console.log(now.format()) // Displays 2017-09-28T00:56:33-05:00 (the default format) 
                - 2017   = Year
                - 09     = Month
                - 28     = Day
                - T      = Current time (on a 24-hr clock)
                - 00     = Hours
                - 56     = Minutes
                - 33     = Seconds
                - -05:00 = Time Zone (GMT Offset, -05:00 == CDT)
        - Instead of the default format, we want to show a more formatted string (AM/PM, etc.)
            - Ex: Display the time in the format -> 1:04am
                - console.log(now.format("h:mma")); // 1:04am
                    - Note: If you did "h:mm a", the result would come out as "1:04 am"
        - Moment is nice because it is a nice, convenient way to format time nicely
            - JavaScript does have a Date object you can use for time, but it's harder to format it in many ways
                - It's also trickier for timezone manipulation
        - We can add/subtract units of time
            - Ex: now.subtract(1, "year");
                - Can subtract any unit of time (year, month, hour, second, etc.)
                
    - Challenge: Print the timestamp so it looks like -> Print Sep 28 2017, 1:11 am 
        - Solution: console.log(now.format("MMM Do YYYY, h:mm a"));

Timestamps
    - Unix Timestamps
        - A great way to send dates around diffrerent computers
        - Ex: If a server wanted to show when a computer connected to it, it could use a timestamp
    - Last time, we used now.format() to get a string representation of time (2017-09-30T22:55:05-05:00)
    - Now, we can actually turn all of that information into a number
        - The number is the number of seconds that have passed between now and January 1, 1970
            - All software/computers use this date as a reference point (I think because of y2k?)
    - epochconverter.com
        - Site that lets you see the number o fseconds passing since Jan 1, 1970
    - So why would we want to use epoch vs.the 2017-09-30T22:55:05-05:00 timestamp?
        - Timestamps are time-zone independent
            - Since it stores the time in UTC, you can always convert it to your own local time
            - When you want to compare if something happened before something else, you dont have to do anything fancy
                - Ex: if (123543 < 923485940)
                    - They're both just numbers, so the smaller one means it happened before
    - How to write the Unix timestamp
        - console.log(now.format('X')); // Display seconds since that moment (unix timestamp)
    - One thing to know is that in JavaScript, dates are commonly stored in JavaScript Unix Timestamps
        - It's basically the same thing, except (JUTs) have the time in milliseconds
                                                                        ------------
        - That means, you just have to tack on three digits after the regular timestamp, and bam, it's not a JUT
        - How to write it in milliseconds
            - console.log(now.format('x')); // Milliseconds since Jan 1, 1970
        - Remember:
            - format("X") = Seconds since Jan 1, 1970
            - format("x") = Milliseconds since Jan 1, 1970
        - NOTE: using the format() method returns the times as STRINGS, meaning if you want to compare the times, you'd be checking if one String is less than the other
            - To fix, convert both strings to numbers
                - You can use the now.valueOf() method to turn the value to a Javascript timestamp
                    - Returns the number in MILLISECONDS
    - So once we have a timestamp, how do we convert it back to a human readable date?
        - var timestamp = 1506831425613;
          var timestampMoment = moment.utc(timestamp); // Accessing Moment's UTC property
          
          - Let's break down what's happening
            - moment.utc()
                - Instead of calling moment as a function like before, here we're accessing Moment's UTC property
                - This tells Moment that we're passing in a time that's in UTC, since all times are in that format
                - By doing this, we can get a local representation of that time
                    - Meaning, even though this timestamp is a particular point in time, this will automatically convert that time into my local time for me to view (Central Time in my case)
                - See Example 8
                    - You'll notice that the time is off
                        - This is due to the timezone offset
                            - To fix it, we want to take the timestamp and convert it to our local offset before we format it
                                - Ex: console.log(timestampMoment.local().format("h:mm a")); // 11:17 pm
        
Show Message Time in Chat App
    - See Example 9
    
Parsing Query Params
    - When creating a socket.io app, there might be variables you want to send along/use inside the app
        - In our case, we want to have
            - A name, so we can add that every time we send a message
            - A room, so that you caan only send/receive messages from people your in the same room with
    - Everything after the '?' in a web address is part of a query parameter
        - Each query consists of key/value pairs, with an '=' in between each one
            - Ex: https://www.google.com/search?q=libgdx&oq=libgdx&aqs=chrome.0.69i59j69i60l4j0.999j0j7&sourceid=chrome&ie=UTF-8
                - Multiple queries are separated by an ampersand (&)
    - Surprisingly, there isnt a defualt way to grab the query in Javascript (verify later)
        - Using specific code from Andrew in this case to make it easier (QueryParams.js)
    - NOTE: For future reference
        - Open up Chrome DevTools
        - In Console, type "window.location" and press Enter
            - This returns a Location object containing various amounts of data, with one of the properties being "search"
                - This is where you'll see the query string you have in the address bar
    - To show QueryParams.js works:
        - Add it to index.html
        - In app.js add the following
            - var name = getQueryVariable("name");
              var room = getQueryVariable("room");
              console.log(`${name} wants to join ${room}`);
              
            - If we had http://localhost:3000/?name=Michael&room=LOTR%20Fans as our link, we would get "Michael wants to join LOTR Fans" as a result in the console
              

Showing Names
    - On the client, when we send a message, we can add a "name" property to our message, and then send it to every user, including ourselves
    - See Example 10
        - Note: If you have no queries in your addres (so just localhost:3000), and you try typing a message, your name comes up as "undefined"
            - This is due to the getQueryVariable method. Andrew currently has it as returning undefined if the query doesn't exist.
            - We can fix this by changing the first line in app.js to -> var name = getQueryVariable("name") || "Anonymous"; 
                - Now the name displays "Anonymous"

Add A Join Page
    - Now we want to be able to give the user the ability to set/change their name, instead of using the url to get their name
    - We'll create another html file that will take the name and click a Join button, which will then move to the chat app
    - <label> -> tells you what the field is for
    - Challenge: Add a link to navigate back to the index from chat.html to change your name on the fly
        - See Example 11
    
Chat Room Names
    - Create room name label, room for name property
        - Get a string for the room for the user to enter a name
    - app.js -> put room name in h1 tag in chat.html w/ jQuery
    - Problem: If you try putting "LOTR Fans" as a room, the Room title becomes "LOTR+Fans"
        - When you use the <form> tag, spaces get replaced with '+' signs, while if you had done something like "LOTR Fans+", the result would have been "LOTR+Fans+"
            - The URL would've looked like this -> http://localhost:3000/chat.html?name=Mike&room=LOTR+Fans%2B
            - Adding a normal '+' still gets encoded
    - How to fix it?
        - Regular Expressions of course!
        - We replace all generated '+' signs with spaces
        - In QueryParams, we change the line to -> return decodeURIComponent(pair[1]).replace(/\+/g, " ");
            - replace(/\+/g, " ");
                - /  -> Beginning of Regular Expression
                - \+ -> Escape character so it recognizes this as a regular + sign
                - /  -> End of Regular Expression
                - g  -> Modifier; Means Global; Grabs all occurrances of the + sign
                - So basically, anything between the two /'s is the expression, and anything after the last / is a modifier
        - Now if we type "LOTR Fans+" we lose all + signs, even the ones we wanted!
            - To fix, modify line to -> return decodeURIComponent(pair[1].replace(/\+/g, " "));
                - This is different becaus ebefore, we were decoding the raw data, and THEN replacing both +'s with spaces
                - Now, we are replacing +'s with spaces FIRST, and THEN decoding the data
        - See Example 12
        
Connecting To A Room
    - Now we'll make it so you only see messages within your room only
    - Socket.io feature called Rooms
        - Let's you put sockets in specific rooms, and will only let you send messages in those specific rooms
            - Think of it like groups
                - Ex: Could group 5 sockets, and only send messages to those 5
    - app.js
        - Created a custom event (joinRoom)
    - server.js (heavy-lifting)
        - We can use the join(<room name>) method to put a socket in a room
            - socket.join(req.room);
        - To send a message to only people in the room, we can use the to() method
            - socket.broadcast.to(req.room).emit("message", {...})
        - Now we need to make it actually send (emit) the message in socket.on('message'...) to the room the user is part of
            - PROBLEM: Currently, we don't know what room the user is a part of in our callback!
            - SOLUTION (common for socket): Create a new variable to store the client's info, so we can use it in callbacks later
                - In our case, well make an object that will store
                    - Client ID (generated by socket.io)
                    - Any other info we want to save for later (Room they're in for now)
    - See Example 13 
            
Send Disconnect Message
    - Show a message saying "so-and-so has left"
    - For this, we'll use the built in "disconnect" method in socket.io
        - Fired from client to the server
    - See Example 14
    
Adding @currentUser Command
    - This command will list all of the users in the current room you are in
    - If the message matches the command, we'll execute specific code for that instead
    - See Example 15

Bootstrap and Styling the Join Page
    - Add the bootstrap css file only (copy from CDN link and save)
        - If you try running the app again, you automatically see some of the bootstrap changes on it! (wowee!)
    - <div class="form-group">
        - "form-group" is a bootstrap class that let's you style a label and an input field at the same time
    - To center the content in Bootstrp 4 (since thats what I had), I had to change the div to:
        - <div class="row justify-content-center">
      instead of trying to do the col-md-4 col-md-offset-4 thing
        - Update: switched back to v3 Bootstrap

Styling the Join Page
    - <div class="input-group">
        - input-group let's you pair up texts and icons with other input fields
    - styles.css explanation
        - min-height: Set the minumum height of an element
            - vh -> Viewport Height, which is a relative length
                - When we say 100vh, we're really saying we want this element to take up 100% of the viewport height (100% screen size)
        - margin: 0 -> Margin sets the size of the whitespace outside the border. Having 0 means we want no space outside the border
        - display: flex; -> Enables Flexbox
            - Flexbox ensures that elements behave predictably when the page layout has to accommodate for different screen sizes/different display devices
        - align-items: center -> align-items definies how browsers distrubute space between/around flex items along the cross-axis of their container
            - center = vertical center alignment

Styling the Chat Page
    - 

    
    
                                  
                                  Examples
                                  --------
                            
Example 1 - Setup for Socket.io
---------
var PORT = process.env.PORT || 3000;
var express = require("express");
var app = express();

// Tells Node to start a new server and use the Express app as a boilerplate
// Anything the Express app listens to, the server should listen as well
var http = require("http").Server(app);

app.use(express.static(__dirname + "/public"));

http.listen(PORT, function() {
   console.log("Server started!"); 
});


Example 2 - Connecting to the Server
---------

    server.js
    ---------
    var PORT = process.env.PORT || 3000;
    var express = require("express");
    var app = express();
    var http = require("http").Server(app);
    var io = require("socket.io")(http);              // Format socket.io expects

    app.use(express.static(__dirname + "/public"));

    io.on("connection", function() {                  // on -> lets you listen for events (name of event, function)
        console.log("User connected via socket.io!"); // prints when we get a connection
    }); 

    http.listen(PORT, function() {
       console.log("Server started!"); 
    });

    index.html
    ----------
    <!doctype html>
    <html>
        <head>
            <meta charset="utf-8">
            <title>Socket.io Basics</title>
        </head>
        <body>
            <script src="js/jquery-3.2.1.min.js"></script>
            <script src="js/socket.io-1.3.7.js"></script>

            <script type="text/javascript">
                var socket = io(); // io is defined in socket.io library
            </script>
        </body>
    </html>


Example 3 - Connecting Client to Server
---------
var socket = io();

socket.on("connect", function() {
   console.log("Connected to socket.io server!"); 
});


Example 4 - Send Live Data -> Server to Client Example
---------

    server.js
    ---------
    var PORT = process.env.PORT || 3000;
    var express = require("express");
    var app = express();
    var http = require("http").Server(app);
    var io = require("socket.io")(http); // Format socket.io expects

    app.use(express.static(__dirname + "/public"));

    io.on("connection", function(socket) { // on -> lets you listen for events (name of event, function)
        console.log("User connected via socket.io!"); // prints when we get a connection

        socket.emit("message", { // Emits an event; (event_name, data to send)
            text: "Welcome to the chat application!"
        });
    }); 

    app.js
    ------
    http.listen(PORT, function() {
       console.log("Server started!"); 
    });

    var socket = io();

    socket.on("connect", function() {
       console.log("Connected to socket.io server!"); 
    });

    socket.on("message", function(message) {
        console.log("New message:");
        console.log(message.text);
    });
    
    
Example 5 - Two Browsers Communicating (server.js)
---------
var PORT = process.env.PORT || 3000;
var express = require("express");
var app = express();
var http = require("http").Server(app);
var io = require("socket.io")(http); // Format socket.io expects

app.use(express.static(__dirname + "/public"));

io.on("connection", function(socket) { // on -> lets you listen for events (name of event, function)
    console.log("User connected via socket.io!"); // prints when we get a connection
    
    socket.on("message", function(message) { // Listens for a message event
        console.log("Message received: " + message.text);
        socket.broadcast.emit("message", message); // Sends message to every other browser connected except us
    });
    
    socket.emit("message", { // Emits an event; (event_name, data to send)
        text: "Welcome to the chat application!"
    });
}); 

http.listen(PORT, function() {
   console.log("Server started!"); 
});

    In Chrome
    ---------
        - Open two browsers and have them both connect to localhost:3000
        - Open DevTools on both
        - On one broswer, onpen the Console tab and send a message, and see it appear on the other, and vice-versa!
            - Ex: socket.emit("message", {text: "Hey Everybody!"});


Example 6 - Use jQuery To Handle Sending Messages
---------
// Handles submitting a new message
var $form = jQuery("#message-form");

$form.on("submit", function(event) { // submit -> built-in browser event that all browsers have
    event.preventDefault(); // used when you don't want to refresh a page, and handle form submission on your own
    var $message = $("input[name=message]"); // can also use $form.find(<element/id/class you wanna find)
    socket.emit("message", {
       text: $message.val() 
    });
    $message.val(""); // Removes text from input box after hitting Submit
});


Example 7 - Making Messages Visual
---------

    index.html
    ----------
    <body>
        <div class="messages">
            <!-- Messages end up here! -->
        </div>
        ...
        ...
    </body>

    app.js
    ------
    socket.on("message", function(message) {
        console.log("New message:");
        console.log(message.text);

        jQuery(".messages").append("<p>" + message.text + "</p>"); // Add the message to the <div> tag in index.html
    });
    
    In Chrome
    ---------
        - Bring up 2 browsers and go to localhost:3000
        - Send a message in either one and see the action!  
    
    
Example 8 - Convert Unix Timestamp to Date
---------
var timestamp = 1506831425613;
var timestampMoment = moment.utc(timestamp); // Accessing Moment's UTC property
console.log(timestampMoment.format()); // Displays 2017-10-01T04:17:05+00:00


Example 9 - Showing Timestamp With Messages
---------

    server.js
    ---------
    var moment = require("moment");
    ...

    socket.on("message", function(message) { // Listens for a message event
        console.log("Message received: " + message.text);
        message.timestamp = moment().valueOf();
        io.emit("message", message); // Sends message to every other browser connected including us
    });

    socket.emit("message", { // Emits an event; (event_name, data to send)
        text: "Welcome to the chat application!",
        timestamp: moment().valueOf() // Attach the timestamp property = javascript timestamp (ms)
    });

    public/js/app.js
    ----------------
    socket.on("message", function(message) {
        var momentTimestamp = moment.utc(message.timestamp);
        console.log("New message:");
        console.log(message.text);

        jQuery(".messages").append("<p><strong>" + momentTimestamp.local().format("h:mm a") + ": </strong> " +  message.text + "</p>"); //moment.format to concat it
    });
    
    
Example 10 - Showing Names
----------

    app.js
    ------
    var $message = jQuery(".messages"); // $ before the variable helps distinguish what will be used for jQuery
    ...

    $message.append("<p><strong>" + message.name + " " + momentTimestamp.local().format("h:mm a") + "</strong></p>");
    $message.append("<p>" + message.text + "</p>");

    ...

    $form.on("submit", function(event) { 
        event.preventDefault(); 
        var $message = $("input[name=message]"); 
        socket.emit("message", {
           name: name,
           text: $message.val() 
        });
        $message.val(""); 
    });

    server.js
    ---------
    socket.emit("message", { // Emits an event; (event_name, data to send)
        name: "System",
        text: "Welcome to the chat application!",
        timestamp: moment().valueOf()
    });
    
    
Example 11 - Join Page + Change Name Functionality
----------

    index.html
    ----------
    <!doctype html>
    <html>
        <head>
            <meta charset="utf-8">
            <title>Socket.io Basics</title>
        </head>
        <body>
            <h1>Join Chat</h1>
            <form action="/chat.html">
                <label>Display Name</label>
                <input type="text" name="name"/>
                <input type="submit" value="Join Chat"/>
            </form>
        </body>
    </html>

    chat.html
    ---------
    <!doctype html>
    <html>
        <head>
            <meta charset="utf-8">
            <title>Socket.io Basics</title>
        </head>
        <body>
            <a href="index.html">Change Settings</a>
            <div class="messages">
                <!-- Messages end up here! -->
            </div>

            ...
            ...

        </body>
    </html> 


Example 12 - Room Names
----------

    app.js
    ------
    // Update h1 tag
    jQuery(".room-title").text(room);

    index.html
    ----------
    <form action="/chat.html">
        <label>Display Name</label>
        <input type="text" name="name"/>
        <label>Room Name</label>
        <input type="text" name="room"/>
        <input type="submit" value="Join Chat"/>
    </form>

    chat.html
    ---------
    <h1 class="room-title"><!-- Room Name (use jQuery) --></h1>
    
    
Example 13 - Connecting To A Room
----------

app.js
------
socket.on("connect", function() {
    console.log("Connected to socket.io server!"); 
    socket.emit("joinRoom", { // joinRoom = custom name, could've been whatever
        name: name,
        room: room
    }); 
});

server.js
---------
var clientInfo = {};

socket.on("joinRoom", function(req) { // req -> contains name, room object we made in app.js
    clientInfo[socket.id] = req;
    socket.join(req.room); // join = built-in Socket method that tells the incoming socket to join a specific room
    // broadcast.to(<rm_name>) -> send something to everyone in a specified room
    socket.broadcast.to(req.room).emit("message", { 
        name: "System",
        text: req.name + " has joined!",
        timestamp: moment().valueOf()
    });
});

socket.on("message", function(message) { // Listens for a message event
    console.log("Message received: " + message.text);
    message.timestamp = moment().valueOf();
    io.to(clientInfo[socket.id].room).emit("message", message); // Sends message to every other browser connected including us that are in the same room as us
});


Example 14 - Disconnecting A User
----------

    server.js
    ---------
    socket.on("disconnect", function() {
        var userData = clientInfo[socket.id];
        // First check if user is part of a chat room
        if(typeof userData !== "undefined")
        {
            socket.leave(userData.room); // Disconnects user from chat room
            io.to(userData.room).emit("message", {
                name: "System",
                text: userData.name + " has left!", // Tell everyone user left
                timestamp: moment().valueOf()
            });
            // Delete data from clientInfo
            delete clientInfo[socket.id]; // delete -> removes a property from an object
        }
    });


Example 15 - Adding the @currentUsers command
----------
// Sends current users to provided socket
function sendCurrentUsers(socket) {
    // get the ID of the room from socket
    // once you have that, look through clientInfo and see who else has same ID
    // if they match, get username from it and add it to string
    var info = clientInfo[socket.id];
    var users = [];

    if(typeof info === 'undefined') {
        return; // stops us from searching for rooms that dont exist
    }

    Object.keys(clientInfo).forEach(function(socketId) { // socketId = key in this case
        // Gets info from the client (Ex: {"abc123": {'name': "Mike", "room": "LOTR Fans"} }
        // This grabs "abc123", so value is the inner object
        var userInfo = clientInfo[socketId]; 
        if(info.room === userInfo.room)
            users.push(userInfo.name);
    });

    socket.emit("message", {
       name: "System",
       text: "Current Users: " + users.join(", "),
       timestamp: moment().valueOf() 
    });
}

/.../

socket.on("message", function(message) { // Listens for a message event
    console.log("Message received: " + message.text);

    if(message.text === "@currentUsers")  // if a specific command was types (in this case to list the cuurent users)
    {
        sendCurrentUsers(socket);
    }
    else // run default code
    {
        message.timestamp = moment().valueOf();
        io.to(clientInfo[socket.id].room).emit("message", message); // Sends message to every other browser connected including us that are in the same room as us
    }

});


Example 16 -
----------
